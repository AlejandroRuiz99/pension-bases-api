"""
API FastAPI para extraer bases de cotizaci√≥n y calcular base reguladora.
Versi√≥n optimizada para producci√≥n.
"""

import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from contextlib import asynccontextmanager

from api.endpoints import extract, simulate, config_info
from core.config.errors import BasesParserError


# Configuraci√≥n de la aplicaci√≥n durante el startup y shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ Iniciando API de Bases de Cotizaci√≥n (Producci√≥n)...")
    yield
    # Shutdown
    print("üõë Cerrando API de Bases de Cotizaci√≥n...")


# Crear la aplicaci√≥n FastAPI con documentaci√≥n
app = FastAPI(
    title="üè¢ API Bases de Cotizaci√≥n",
    description="""
    ## üìä API para Extracci√≥n y C√°lculo de Bases de Cotizaci√≥n
    
    API profesional para:
    * **üìÑ Extracci√≥n de bases** de archivos PDF
    * **üßÆ Simulaci√≥n de per√≠odos** y c√°lculo de base reguladora  
    * **‚öôÔ∏è Configuraci√≥n** de par√°metros normativos
    
    ### üöÄ Endpoints Principales:
    * `POST /api/process` - Procesamiento completo (PDF ‚Üí Base Reguladora)
    * `POST /api/extract` - Extracci√≥n de bases de PDF
    * `POST /api/simulate` - C√°lculo de base reguladora
    * `GET /api/simulate/config` - Configuraci√≥n disponible
    """,
    version="1.0.0",
    contact={
        "name": "API Bases de Cotizaci√≥n",
        "url": "https://github.com/tu-usuario/bases-cotizacion"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS para producci√≥n
allowed_origins = [
    "https://pension-bases-api-e707c1384c99.herokuapp.com",  # Tu app de Heroku
    "http://localhost:3000",  # Para desarrollo local
    "http://localhost:8080",  # Para desarrollo local
    "http://localhost:8000",  # Para desarrollo local
]

# Por ahora, permitir todos los or√≠genes para facilitar testing
allowed_origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers de los endpoints
app.include_router(extract.router, prefix="/api", tags=["üìÑ Extracci√≥n"])
app.include_router(simulate.router, prefix="/api", tags=["üßÆ Simulaci√≥n"])
app.include_router(config_info.router, prefix="/api/config", tags=["üîß Configuraci√≥n"])


@app.get("/", response_class=HTMLResponse, tags=["üè† Inicio"])
async def root():
    """P√°gina de inicio de la API."""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Bases de Cotizaci√≥n</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh; color: white;
            }
            .container { 
                background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; 
                backdrop-filter: blur(10px); box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }
            h1 { text-align: center; font-size: 2.5em; margin-bottom: 10px; }
            .subtitle { text-align: center; opacity: 0.9; margin-bottom: 30px; }
            .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }
            .feature { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; text-align: center; }
            .links { display: flex; justify-content: center; gap: 15px; margin: 30px 0; flex-wrap: wrap; }
            .btn { 
                background: rgba(255,255,255,0.2); color: white; padding: 12px 24px; 
                border-radius: 25px; text-decoration: none; transition: all 0.3s;
                border: 1px solid rgba(255,255,255,0.3);
            }
            .btn:hover { background: rgba(255,255,255,0.3); transform: translateY(-2px); }
            .status { text-align: center; background: rgba(0,255,0,0.2); padding: 15px; border-radius: 10px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üè¢ API Bases de Cotizaci√≥n</h1>
            <p class="subtitle">Extracci√≥n y c√°lculo de bases reguladoras profesional</p>
            
            <div class="status">
                ‚úÖ <strong>API Activa</strong> - Todos los servicios operativos
            </div>
            
            <div class="features">
                <div class="feature">
                    <h3>üìÑ Extracci√≥n</h3>
                    <p>Procesa PDFs de la Seguridad Social autom√°ticamente</p>
                </div>
                <div class="feature">
                    <h3>üßÆ C√°lculo</h3>
                    <p>Simula per√≠odos y calcula base reguladora seg√∫n normativa 2025</p>
                </div>
                <div class="feature">
                    <h3>‚öôÔ∏è Configuraci√≥n</h3>
                    <p>Par√°metros actualizados de √≠ndices y topes de cotizaci√≥n</p>
                </div>
            </div>
            
            <div class="links">
                <a href="/docs" class="btn">üìñ Documentaci√≥n API</a>
                <a href="/health" class="btn">üíä Estado</a>
                <a href="/api/simulate/config" class="btn">‚öôÔ∏è Configuraci√≥n</a>
            </div>
        </div>
    </body>
    </html>
    """)


@app.get("/health", tags=["üíä Salud"])
async def health_check():
    """Endpoint de verificaci√≥n de salud."""
    try:
        from core.config.config_manager import config
        
        # Verificar configuraciones
        config.cargar_indices_revalorizacion()
        config.cargar_topes_cotizacion()
        config.cargar_parametros_computo()
        
        return {
            "status": "healthy",
            "message": "API funcionando correctamente",
            "version": "1.0.0",
            "environment": os.getenv("ENVIRONMENT", "production"),
            "services": {
                "extraction": "‚úÖ Operativo",
                "simulation": "‚úÖ Operativo", 
                "configuration": "‚úÖ Operativo"
            }
        }
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Servicio no disponible: {str(e)}")


# Manejadores de errores
@app.exception_handler(BasesParserError)
async def bases_parser_exception_handler(request, exc):
    return HTTPException(status_code=400, detail=str(exc))


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    # En producci√≥n, no mostrar detalles del error
    if os.getenv("ENVIRONMENT") == "development":
        return HTTPException(status_code=500, detail=str(exc))
    else:
        return HTTPException(status_code=500, detail="Error interno del servidor")


if __name__ == "__main__":
    import uvicorn
    
    port = int(os.environ.get("PORT", 8000))
    
    print("üöÄ Iniciando servidor de producci√≥n...")
    print(f"üìñ Documentaci√≥n: http://localhost:{port}/docs")
    
    uvicorn.run(
        "app_production:app",
        host="0.0.0.0",
        port=port,
        reload=False,
        log_level="info"
    ) 