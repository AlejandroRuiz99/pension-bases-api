"""
API FastAPI para extraer bases de cotizaci√≥n y calcular base reguladora.
Punto de entrada principal de la aplicaci√≥n.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from contextlib import asynccontextmanager

from api.endpoints import extract, simulate, config_info
from core.config.errors import BasesParserError


# Configuraci√≥n de la aplicaci√≥n durante el startup y shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ Iniciando API de Bases de Cotizaci√≥n...")
    yield
    # Shutdown
    print("üõë Cerrando API de Bases de Cotizaci√≥n...")


# Crear la aplicaci√≥n FastAPI con documentaci√≥n mejorada
app = FastAPI(
    title="üè¢ API Bases de Cotizaci√≥n",
    description="""
    ## üìä API para Extracci√≥n y C√°lculo de Bases de Cotizaci√≥n
    
    Esta API permite:
    
    ### üìÑ Extracci√≥n de PDFs
    * **Extraer bases de cotizaci√≥n** de archivos PDF
    * **Identificar empresas y reg√≠menes** autom√°ticamente
    * **Validar y procesar datos** de forma robusta
    
    ### üßÆ Simulaci√≥n y C√°lculo
    * **Simular per√≠odos futuros** hasta la fecha de jubilaci√≥n
    * **Aplicar revalorizaci√≥n** seg√∫n normativa 2025
    * **Calcular base reguladora** para pensiones
    * **Manejar lagunas** de cotizaci√≥n autom√°ticamente
    
    ### üîß Caracter√≠sticas
    * Validaci√≥n autom√°tica con **Pydantic**
    * Manejo robusto de **errores**
    * Compatible con **m√∫ltiples reg√≠menes** (General, Aut√≥nomo)
    
    ---
    
    ### üöÄ Inicio R√°pido
    
    1. **Extraer bases**: Sube un PDF con `POST /api/extract`
    2. **Calcular pensi√≥n**: Usa las bases extra√≠das con `POST /api/simulate`
    3. **Ver configuraci√≥n**: Consulta par√°metros con `GET /api/simulate/config`
    """,
    version="1.0.0",
    contact={
        "name": "Soporte API Bases de Cotizaci√≥n",
        "email": "soporte@basescotizacion.es",
        "url": "https://github.com/tu-repo/bases-cotizacion"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    servers=[
        {
            "url": "http://localhost:8000",
            "description": "Servidor de desarrollo"
        }
    ],
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url=None
)

# Configurar CORS para permitir requests desde cualquier origen
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios concretos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers de los endpoints
app.include_router(extract.router, prefix="/api", tags=["üìÑ Extracci√≥n"])
app.include_router(simulate.router, prefix="/api", tags=["üßÆ Simulaci√≥n"])
app.include_router(config_info.router, prefix="/api/config", tags=["üîß Configuraci√≥n"])


@app.get("/", response_class=HTMLResponse, tags=["üè† Inicio"])
async def root():
    """P√°gina de inicio con informaci√≥n de la API y enlaces √∫tiles."""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Bases de Cotizaci√≥n</title>
        <meta charset="UTF-8">
        <style>
            body { 
                font-family: Arial, sans-serif; 
                max-width: 800px; 
                margin: 0 auto; 
                padding: 20px; 
                line-height: 1.6;
                background-color: #f5f5f5;
            }
            .container { 
                background: white; 
                padding: 30px; 
                border-radius: 10px; 
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            h1 { color: #2c3e50; text-align: center; }
            h2 { color: #34495e; border-bottom: 2px solid #3498db; padding-bottom: 5px; }
            .endpoint { 
                background: #ecf0f1; 
                padding: 15px; 
                margin: 10px 0; 
                border-radius: 5px; 
                border-left: 4px solid #3498db;
            }
            .method { 
                color: white; 
                padding: 3px 8px; 
                border-radius: 3px; 
                font-weight: bold; 
                font-size: 12px;
            }
            .get { background-color: #27ae60; }
            .post { background-color: #e74c3c; }
            a { color: #3498db; text-decoration: none; }
            a:hover { text-decoration: underline; }
            .status { 
                text-align: center; 
                padding: 10px; 
                background: #d5f4e6; 
                border-radius: 5px; 
                margin: 20px 0;
            }
            .quick-links {
                display: flex;
                justify-content: space-around;
                margin: 20px 0;
            }
            .link-button {
                background: #3498db;
                color: white;
                padding: 10px 20px;
                border-radius: 5px;
                text-decoration: none;
                transition: background 0.3s;
            }
            .link-button:hover {
                background: #2980b9;
                text-decoration: none;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üè¢ API Bases de Cotizaci√≥n</h1>
            
            <div class="status">
                ‚úÖ <strong>API Activa</strong> - Todos los servicios funcionando correctamente
            </div>
            
            <div class="quick-links">
                <a href="/docs" class="link-button">üìñ Documentaci√≥n Swagger</a>
                <a href="/health" class="link-button">üíä Estado de Salud</a>
                <a href="/api/info" class="link-button">‚ÑπÔ∏è Informaci√≥n API</a>
            </div>
            
            <h2>üöÄ Endpoints Disponibles</h2>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/extract</strong><br>
                üìÑ Extrae bases de cotizaci√≥n de archivos PDF
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/simulate</strong><br>
                üßÆ Calcula base reguladora completa con simulaci√≥n
            </div>
            

            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/simulate/config</strong><br>
                ‚öôÔ∏è Obtiene configuraci√≥n disponible para simulaciones
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/process</strong><br>
                üöÄ Procesa PDF completo: extrae bases y simula autom√°ticamente
            </div>
            
            <h2>üîß C√≥mo Usar</h2>
            
            <h3>üöÄ Opci√≥n 1: Todo en uno (Recomendado)</h3>
            <ol>
                <li><strong>Procesamiento completo:</strong> Sube un PDF y obt√©n la base reguladora directamente con <code>POST /api/process</code></li>
            </ol>
            
            <h3>üîß Opci√≥n 2: Paso a paso</h3>
            <ol>
                <li><strong>Extracci√≥n:</strong> Sube un PDF con bases de cotizaci√≥n usando <code>POST /api/extract</code></li>
                <li><strong>Simulaci√≥n:</strong> Usa las bases extra√≠das para calcular la pensi√≥n con <code>POST /api/simulate</code></li>
                <li><strong>Configuraci√≥n:</strong> Consulta par√°metros disponibles con <code>GET /api/simulate/config</code></li>
            </ol>
            
            <h2>üì± Probar la API</h2>
            <p>Utiliza la <a href="/docs">documentaci√≥n interactiva de Swagger</a> para probar todos los endpoints directamente desde el navegador.</p>
            
            <h2>‚ÑπÔ∏è Informaci√≥n T√©cnica</h2>
            <ul>
                <li><strong>Versi√≥n:</strong> 1.0.0</li>
                <li><strong>Framework:</strong> FastAPI</li>
                <li><strong>Validaci√≥n:</strong> Pydantic</li>
            </ul>
        </div>
    </body>
    </html>
    """)


@app.get("/health", tags=["üíä Salud"])
async def health_check():
    """
    Endpoint de verificaci√≥n de salud de la API.
    
    Returns:
        dict: Estado de salud con informaci√≥n del sistema
    """
    try:
        from core.config.config_manager import config
        
        # Verificar que se pueden cargar las configuraciones
        config.cargar_indices_revalorizacion()
        config.cargar_topes_cotizacion()
        config.cargar_parametros_computo()
        
        return {
            "status": "healthy",
            "message": "API funcionando correctamente",
            "version": "1.0.0",
            "services": {
                "extraction": "‚úÖ Operativo",
                "simulation": "‚úÖ Operativo", 
                "configuration": "‚úÖ Operativo"
            },
            "endpoints": {
                "documentation": "/docs",
                "health": "/health",
                "extract": "/api/extract",
                "simulate": "/api/simulate",
                "config": "/api/simulate/config"
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=503, 
            detail=f"Servicio no disponible: {str(e)}"
        )


@app.get("/api/info", tags=["‚ÑπÔ∏è Informaci√≥n"])
async def api_info():
    """
    Informaci√≥n detallada sobre la API y sus capacidades.
    
    Returns:
        dict: Informaci√≥n completa de la API
    """
    return {
        "api_name": "API Bases de Cotizaci√≥n",
        "version": "1.0.0",
        "description": "API para extraer bases de cotizaci√≥n y calcular base reguladora",
        "features": [
            "Extracci√≥n autom√°tica de PDFs",
            "C√°lculo de base reguladora",
            "Simulaci√≥n de per√≠odos futuros",
            "Revalorizaci√≥n seg√∫n normativa 2025",
            "Manejo de lagunas autom√°tico",
            "M√∫ltiples reg√≠menes (General, Aut√≥nomo)"
        ],
                "supported_formats": ["PDF"],
        "supported_regimes": ["GENERAL", "AUTONOMO"],
        "documentation": {
            "swagger": "/docs"
        },
        "contact": {
            "support": "Documentaci√≥n disponible en /docs"
        }
    }


# Manejador global de errores
@app.exception_handler(BasesParserError)
async def bases_parser_exception_handler(request, exc):
    return HTTPException(status_code=400, detail=str(exc))


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    return HTTPException(status_code=500, detail="Error interno del servidor")


if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ Iniciando servidor API...")
    print("üìñ Documentaci√≥n disponible en: http://localhost:8000/docs")
    print("üè† P√°gina principal: http://localhost:8000")
    
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 