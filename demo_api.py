#!/usr/bin/env python3
"""
Script de demostraci√≥n de la API Bases de Cotizaci√≥n.
Muestra todas las funcionalidades disponibles.
"""

import requests
import json
import time
from pathlib import Path

# Configuraci√≥n de la API
API_BASE_URL = "http://localhost:8000"
API_URLS = {
    "health": f"{API_BASE_URL}/health",
    "info": f"{API_BASE_URL}/api/info",
    "config": f"{API_BASE_URL}/api/simulate/config",
    "extract": f"{API_BASE_URL}/api/extract",
    "simulate": f"{API_BASE_URL}/api/simulate",

}

def print_header(title):
    """Imprime un encabezado formateado."""
    print(f"\n{'='*60}")
    print(f"üî• {title}")
    print('='*60)

def print_section(title):
    """Imprime una secci√≥n formateada."""
    print(f"\n{'‚îÄ'*40}")
    print(f"üìã {title}")
    print('‚îÄ'*40)

def check_api_status():
    """Verifica que la API est√© funcionando."""
    print_header("VERIFICACI√ìN DE ESTADO DE LA API")
    
    try:
        response = requests.get(API_URLS["health"], timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print("‚úÖ API funcionando correctamente")
            print(f"üìä Estado: {health_data.get('status', 'unknown')}")
            print(f"üìù Mensaje: {health_data.get('message', 'N/A')}")
            print(f"üî¢ Versi√≥n: {health_data.get('version', 'N/A')}")
            
            # Mostrar estado de servicios
            services = health_data.get('services', {})
            print("\nüîß Estado de servicios:")
            for service, status in services.items():
                print(f"   ‚Ä¢ {service}: {status}")
                
            return True
        else:
            print(f"‚ùå Error: La API respondi√≥ con c√≥digo {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error: No se puede conectar con la API")
        print("üí° Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:8000")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def get_api_info():
    """Obtiene informaci√≥n detallada de la API."""
    print_section("Informaci√≥n de la API")
    
    try:
        response = requests.get(API_URLS["info"])
        if response.status_code == 200:
            info = response.json()
            print(f"üìõ Nombre: {info.get('api_name', 'N/A')}")
            print(f"üî¢ Versi√≥n: {info.get('version', 'N/A')}")
            print(f"üìù Descripci√≥n: {info.get('description', 'N/A')}")
            
            print("\nüöÄ Caracter√≠sticas:")
            for feature in info.get('features', []):
                print(f"   ‚Ä¢ {feature}")
                
            print(f"\nüìÑ Formatos soportados: {', '.join(info.get('supported_formats', []))}")
            print(f"üè¢ Reg√≠menes soportados: {', '.join(info.get('supported_regimes', []))}")
            
        else:
            print(f"‚ùå Error obteniendo informaci√≥n: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def get_simulation_config():
    """Obtiene la configuraci√≥n de simulaci√≥n."""
    print_section("Configuraci√≥n de Simulaci√≥n")
    
    try:
        response = requests.get(API_URLS["config"])
        if response.status_code == 200:
            config = response.json()
            
            # Mostrar √≠ndices de revalorizaci√≥n
            indices = config.get('indices_revalorizacion', {})
            if indices:
                print("üìà √çndices de Revalorizaci√≥n:")
                total_indices = indices.get('total_indices', 0)
                print(f"   üìä Total √≠ndices: {total_indices}")
                a√±os_disponibles = indices.get('a√±os_disponibles', [])
                if a√±os_disponibles:
                    print(f"   üìÖ A√±os disponibles: {a√±os_disponibles[:5]}..." if len(a√±os_disponibles) > 5 else f"   üìÖ A√±os disponibles: {a√±os_disponibles}")
                periodo_cobertura = indices.get('periodo_cobertura', {})
                if periodo_cobertura.get('desde') and periodo_cobertura.get('hasta'):
                    print(f"   üìÖ Rango: {periodo_cobertura['desde']} ‚Üí {periodo_cobertura['hasta']}")
            
            # Mostrar bases m√≠nimas
            bases_min = config.get('bases_minimas', {})
            if bases_min:
                print("\nüí∞ Bases M√≠nimas:")
                a√±os_disponibles = bases_min.get('a√±os_disponibles', [])
                if a√±os_disponibles:
                    print(f"   üìÖ A√±os disponibles: {a√±os_disponibles[:5]}..." if len(a√±os_disponibles) > 5 else f"   üìÖ A√±os disponibles: {a√±os_disponibles}")
                    a√±o_min = bases_min.get('a√±o_minimo')
                    a√±o_max = bases_min.get('a√±o_maximo')
                    if a√±o_min and a√±o_max:
                        print(f"   üìä Rango: {a√±o_min} ‚Üí {a√±o_max}")
                else:
                    print("   ‚ö†Ô∏è No hay datos de bases m√≠nimas disponibles")
            
            # Mostrar par√°metros de c√≥mputo
            params = config.get('parametros_computo', {})
            if params:
                print("\nüßÆ Par√°metros de C√≥mputo:")
                a√±os_disponibles = params.get('a√±os_disponibles', [])
                if a√±os_disponibles:
                    print(f"   üìÖ A√±os disponibles: {a√±os_disponibles[:5]}..." if len(a√±os_disponibles) > 5 else f"   üìÖ A√±os disponibles: {a√±os_disponibles}")
                    a√±o_min = params.get('a√±o_minimo')
                    a√±o_max = params.get('a√±o_maximo')
                    if a√±o_min and a√±o_max:
                        print(f"   üìä Rango: {a√±o_min} ‚Üí {a√±o_max}")
                else:
                    print("   ‚ö†Ô∏è No hay datos de par√°metros de c√≥mputo disponibles")
            
            return config
        else:
            print(f"‚ùå Error obteniendo configuraci√≥n: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def test_extraction():
    """Prueba la extracci√≥n de bases (simulada con datos de ejemplo)."""
    print_section("Prueba de Extracci√≥n de Bases")
    
    # Buscar archivos PDF de prueba
    test_files = list(Path("tests/bases_data").glob("*.pdf"))
    
    if not test_files:
        print("‚ö†Ô∏è  No se encontraron archivos PDF de prueba en tests/bases_data/")
        print("üí° Para probar la extracci√≥n, a√±ade archivos PDF en esa carpeta")
        return None
    
    test_file = test_files[0]
    print(f"üìÑ Usando archivo de prueba: {test_file.name}")
    
    try:
        with open(test_file, 'rb') as f:
            files = {'file': (test_file.name, f, 'application/pdf')}
            response = requests.post(API_URLS["extract"], files=files)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Extracci√≥n exitosa")
            print(f"üìä Total bases extra√≠das: {result.get('total_bases', 0)}")
            print(f"üìù Mensaje: {result.get('message', 'N/A')}")
            
            # Mostrar metadatos
            metadata = result.get('metadata', {})
            print(f"\nüìÅ Metadatos del archivo:")
            print(f"   ‚Ä¢ Nombre: {metadata.get('filename', 'N/A')}")
            print(f"   ‚Ä¢ Tama√±o: {metadata.get('file_size', 0):,} bytes")
            print(f"   ‚Ä¢ Empresas: {metadata.get('total_empresas', 0)}")
            
            # Mostrar algunas bases de ejemplo
            bases = result.get('bases', [])
            if bases:
                print(f"\nüìã Primeras 3 bases extra√≠das:")
                for base in bases[:3]:
                    print(f"   ‚Ä¢ {base.get('mes_anyo', 'N/A')}: {base.get('base', 0):.2f}‚Ç¨ - {base.get('empresa', 'N/A')}")
            
            return bases
        else:
            print(f"‚ùå Error en extracci√≥n: {response.status_code}")
            if response.text:
                print(f"üìù Detalle: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def test_simulation(bases=None):
    """Prueba la simulaci√≥n de bases."""
    print_section("Prueba de Simulaci√≥n")
    
    # Si no hay bases de extracci√≥n, usar datos de ejemplo
    if not bases:
        print("üìä Usando datos de ejemplo para la simulaci√≥n")
        bases = [
            {"mes_anyo": "01/2023", "base": 2500.00, "empresa": "EMPRESA EJEMPLO SL", "regimen": "GENERAL"},
            {"mes_anyo": "02/2023", "base": 2550.00, "empresa": "EMPRESA EJEMPLO SL", "regimen": "GENERAL"},
            {"mes_anyo": "03/2023", "base": 2600.00, "empresa": "EMPRESA EJEMPLO SL", "regimen": "GENERAL"},
        ]
    
    # Preparar datos de simulaci√≥n
    simulation_data = {
        "bases_extraidas": bases[:12] if len(bases) > 12 else bases,  # M√°ximo 12 bases para la demo
        "fecha_jubilacion": "06/2025",
        "regimen_acceso": "GENERAL",
        "sexo": "MASCULINO"
    }
    
    try:
        # Prueba simulaci√≥n completa
        print("üßÆ Ejecutando simulaci√≥n completa...")
        response = requests.post(API_URLS["simulate"], json=simulation_data)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Simulaci√≥n completa exitosa")
            
            # Mostrar c√°lculo elegido
            calculo_elegido = result.get('calculo_elegido', 'N/A')
            print(f"\nüèÜ C√°lculo elegido: {calculo_elegido}")
            
            # Estad√≠sticas principales
            stats = result.get('estadisticas', {})
            print(f"\nüìä Estad√≠sticas del c√°lculo elegido:")
            print(f"   ‚Ä¢ Total bases: {stats.get('total_bases', 0)}")
            print(f"   ‚Ä¢ Bases revalorizadas: {stats.get('bases_revalorizadas', 0)}")
            print(f"   ‚Ä¢ Suma total: {stats.get('suma_total', 0):,.2f}‚Ç¨")
            print(f"   ‚Ä¢ üí∞ Base reguladora: {stats.get('base_reguladora', 0):,.2f}‚Ç¨")
            
            # Mostrar comparativa si est√° disponible
            comparativa = result.get('comparativa_calculos', {})
            if comparativa:
                print(f"\nüîç Comparativa de c√°lculos:")
                for calculo, datos in comparativa.items():
                    br = datos.get('estadisticas', {}).get('base_reguladora', 0)
                    print(f"   ‚Ä¢ {calculo}: {br:,.2f}‚Ç¨")
            
        else:
            print(f"‚ùå Error en simulaci√≥n completa: {response.status_code}")
        

            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def show_endpoints():
    """Muestra todos los endpoints disponibles."""
    print_section("Endpoints Disponibles")
    
    endpoints = [
        ("GET", "/", "üè† P√°gina de inicio con informaci√≥n"),
        ("GET", "/health", "üíä Estado de salud de la API"),
        ("GET", "/docs", "üìñ Documentaci√≥n Swagger interactiva"),
        ("GET", "/api/info", "‚ÑπÔ∏è Informaci√≥n detallada de la API"),
        ("GET", "/api/simulate/config", "‚öôÔ∏è Configuraci√≥n de simulaci√≥n"),
        ("POST", "/api/extract", "üìÑ Extraer bases de PDF"),
        ("POST", "/api/simulate", "üßÆ Simulaci√≥n completa"),
        ("POST", "/api/process", "üöÄ Procesar PDF completo (Extraer + Simular)"),
    ]
    
    for method, endpoint, description in endpoints:
        color = "üü¢" if method == "GET" else "üî¥"
        print(f"{color} {method:4} {endpoint:25} - {description}")

def show_documentation_links():
    """Muestra enlaces importantes."""
    print_section("Enlaces Importantes")
    
    links = [
        ("üè† P√°gina Principal", "http://localhost:8000"),
        ("üìñ Documentaci√≥n Swagger", "http://localhost:8000/docs"),
        ("üíä Health Check", "http://localhost:8000/health"),
        ("‚ÑπÔ∏è Informaci√≥n API", "http://localhost:8000/api/info"),
    ]
    
    for title, url in links:
        print(f"{title}: {url}")

def main():
    """Funci√≥n principal de demostraci√≥n."""
    print_header("DEMOSTRACI√ìN COMPLETA DE LA API BASES DE COTIZACI√ìN")
    print("üöÄ Esta demostraci√≥n probar√° todas las funcionalidades de la API")
    
    # 1. Verificar estado de la API
    if not check_api_status():
        print("\n‚ùå No se puede continuar sin conexi√≥n a la API")
        return
    
    # 2. Obtener informaci√≥n de la API
    get_api_info()
    
    # 3. Mostrar endpoints disponibles
    show_endpoints()
    
    # 4. Mostrar enlaces importantes
    show_documentation_links()
    
    # 5. Obtener configuraci√≥n
    config = get_simulation_config()
    
    # 6. Probar extracci√≥n
    extracted_bases = test_extraction()
    
    # 7. Probar simulaci√≥n
    test_simulation(extracted_bases)
    
    print("\n" + "‚îÄ" * 60)
    print("üìã Pruebas de Endpoints de Configuraci√≥n")
    print("‚îÄ" * 60)

    # Probar endpoints de configuraci√≥n individual
config_endpoints = [
    ("parametros", "üìä Par√°metros de C√≥mputo"),
    ("indices", "üìà √çndices de Revalorizaci√≥n"), 
    ("topes", "üí∞ Topes de Cotizaci√≥n"),
    ("all", "üîß Configuraci√≥n Completa")
]

for endpoint, nombre in config_endpoints:
    try:
        print(f"\nüîç Probando {nombre}...")
        response = requests.get(f"{API_BASE_URL}/api/config/{endpoint}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ {nombre} obtenida exitosamente")
            
            if endpoint == "parametros":
                print(f"   üìä Total a√±os: {data.get('total_a√±os', 0)}")
                print(f"   üìÖ A√±os disponibles: {data.get('a√±os_disponibles', [])[:3]}...")
            elif endpoint == "indices":
                print(f"   üìà Total √≠ndices: {data.get('total_indices', 0)}")
                rango = data.get('rango_fechas', {})
                print(f"   üìÖ Rango: {rango.get('desde', 'N/A')} ‚Üí {rango.get('hasta', 'N/A')}")
            elif endpoint == "topes":
                print(f"   üí∞ Total a√±os: {data.get('total_a√±os', 0)}")
                print(f"   üìÖ A√±os disponibles: {data.get('a√±os_disponibles', [])[:3]}...")
            elif endpoint == "all":
                resumen = data.get('resumen', {})
                print(f"   üìä Par√°metros: {resumen.get('total_parametros', 0)}")
                print(f"   üìà √çndices: {resumen.get('total_indices', 0)}")
                print(f"   üí∞ Topes: {resumen.get('total_topes', 0)}")
        else:
            print(f"‚ùå Error {response.status_code}: {nombre}")
            
    except Exception as e:
        print(f"‚ùå Error probando {nombre}: {str(e)}")

print("\n" + "‚îÄ" * 60)
print("üìã Enlaces Directos a Endpoints de Configuraci√≥n:")
print("üìä Par√°metros: http://localhost:8000/api/config/parametros")
print("üìà √çndices: http://localhost:8000/api/config/indices")
print("üí∞ Topes: http://localhost:8000/api/config/topes")
print("üîß Todo: http://localhost:8000/api/config/all")

# Mensaje final
print_header("¬°DEMOSTRACI√ìN COMPLETADA!")
print("‚úÖ Todas las pruebas han sido ejecutadas")
print("üìñ Visita http://localhost:8000/docs para probar la API interactivamente")
print("üè† P√°gina principal: http://localhost:8000")

if __name__ == "__main__":
    main() 