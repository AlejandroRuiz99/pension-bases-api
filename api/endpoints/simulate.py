"""
Endpoint para simular per√≠odos y calcular base reguladora.
"""

import tempfile
from pathlib import Path
from fastapi import APIRouter, HTTPException, File, UploadFile, Form
from fastapi.responses import JSONResponse

from services.simulator import SimuladorPeriodos
from services.extractor import ExtractorBasesCotizacion
from models.api_models import SimulateRequest, SimulateResponse, EstadisticasResponse, ErrorResponse
from core.config.errors import BasesParserError


router = APIRouter()


@router.post(
    "/process",
    response_model=SimulateResponse,
    summary="üöÄ Procesar PDF completo (Extraer + Simular)",
    description="""
    Endpoint completo que extrae bases de un PDF y calcula autom√°ticamente la base reguladora.
    
    ### üéØ Proceso completo en un solo paso:
    1. **üìÑ Extrae bases** del archivo PDF proporcionado
    2. **üßÆ Simula per√≠odos** hasta la fecha de jubilaci√≥n
    3. **üìä Calcula base reguladora** final
    
    ### üìã Par√°metros necesarios:
    * **Archivo PDF** con bases de cotizaci√≥n
    * **Fecha de jubilaci√≥n** en formato MM/YYYY
    * **R√©gimen de acceso** (GENERAL o AUTONOMO)
    * **Sexo del cotizante** (MASCULINO o FEMENINO) - Para c√°lculo correcto de lagunas
    
    ### ‚úÖ Ventajas:
    * **Un solo endpoint** para todo el proceso
    * **Autom√°tico** - no necesitas llamar extract + simulate
    * **Eficiente** - procesa todo en memoria
    * **Resultado completo** con estad√≠sticas detalladas
    
    ### üìä Respuesta:
    Devuelve el mismo resultado que `/simulate` pero con las bases extra√≠das autom√°ticamente del PDF.
    """,
    responses={
        200: {
            "description": "Procesamiento completado exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "success": True,
                        "message": "PDF procesado y simulaci√≥n completada exitosamente",
                        "estadisticas": {
                            "total_bases": 24,
                            "base_reguladora": 2028.57,
                            "suma_total": 710000.00
                        },
                        "metadata_extraccion": {
                            "total_bases_extraidas": 24,
                            "periodo_extraido": "01/2023 - 12/2024"
                        }
                    }
                }
            }
        },
        400: {"description": "Error en el archivo PDF o par√°metros"},
        500: {"description": "Error interno del servidor"}
    }
)
async def process_pdf_complete(
    file: UploadFile = File(..., description="üìÅ Archivo PDF con bases de cotizaci√≥n"),
    fecha_jubilacion: str = Form(..., description="üìÖ Fecha de jubilaci√≥n (MM/YYYY)"),
    regimen_acceso: str = Form(default="GENERAL", description="‚öôÔ∏è R√©gimen de acceso"),
    sexo: str = Form(..., description="üë§ Sexo del cotizante (MASCULINO o FEMENINO)")
):
    """
    Procesa un PDF completo: extrae bases y calcula base reguladora autom√°ticamente.
    
    Args:
        file: Archivo PDF con bases de cotizaci√≥n
        fecha_jubilacion: Fecha de jubilaci√≥n en formato MM/YYYY  
        regimen_acceso: R√©gimen de acceso (GENERAL o AUTONOMO)
        
    Returns:
        SimulateResponse: Resultado completo con base reguladora y estad√≠sticas
        
    Raises:
        HTTPException: Si hay errores en el procesamiento
    """
    # Validar archivo PDF
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(
            status_code=400,
            detail="El archivo debe ser un PDF"
        )
    
    # Validar tama√±o del archivo (m√°ximo 10MB)
    max_size = 10 * 1024 * 1024  # 10MB
    if file.size and file.size > max_size:
        raise HTTPException(
            status_code=400,
            detail="El archivo es demasiado grande. M√°ximo 10MB"
        )
    
    # Validar formato de fecha
    import re
    if not re.match(r'^\d{2}/\d{4}$', fecha_jubilacion):
        raise HTTPException(
            status_code=400,
            detail="Fecha de jubilaci√≥n debe estar en formato MM/YYYY"
        )
    
    # Validar r√©gimen
    if regimen_acceso.upper() not in ["GENERAL", "AUTONOMO"]:
        raise HTTPException(
            status_code=400,
            detail="R√©gimen debe ser GENERAL o AUTONOMO"
        )
    
    # Validar sexo
    if sexo.upper() not in ["MASCULINO", "FEMENINO"]:
        raise HTTPException(
            status_code=400,
            detail="Sexo debe ser MASCULINO o FEMENINO"
        )
    
    regimen_acceso = regimen_acceso.upper()
    sexo = sexo.upper()
    
    try:
        # PASO 1: Extraer bases del PDF
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_file:
            content = await file.read()
            temp_file.write(content)
            temp_file_path = Path(temp_file.name)
        
        try:
            # Extraer bases usando el servicio
            extractor = ExtractorBasesCotizacion(temp_file_path)
            resultado_extraccion = extractor.run()
            
            if not resultado_extraccion.bases:
                raise HTTPException(
                    status_code=400,
                    detail="No se encontraron bases de cotizaci√≥n en el PDF"
                )
            
            # Preparar metadatos de extracci√≥n
            metadata_extraccion = {
                "filename": file.filename,
                "file_size": len(content),
                "total_bases_extraidas": len(resultado_extraccion.bases),
                "total_empresas": len(set(base.empresa for base in resultado_extraccion.bases)),
                "periodo_extraido": {
                    "desde": min(base.mes_anyo for base in resultado_extraccion.bases),
                    "hasta": max(base.mes_anyo for base in resultado_extraccion.bases)
                }
            }
            
        finally:
            # Limpiar archivo temporal
            if temp_file_path.exists():
                temp_file_path.unlink()
        
        # PASO 2: Simular con las bases extra√≠das
        # Convertir bases a formato dict para el simulador
        bases_dict = [base.model_dump() for base in resultado_extraccion.bases]
        
        # Preparar datos para el simulador
        bases_data = {
            "bases": bases_dict
        }
        
        # Crear y ejecutar simulador
        simulador = SimuladorPeriodos(
            bases_extraidas=bases_data,
            fecha_jubilacion=fecha_jubilacion,
            regimen_acceso=regimen_acceso,
            sexo=sexo
        )
        
        # Procesar bases completas
        resultado_simulacion = simulador.procesar_bases_completo()
        
        # Crear response con estad√≠sticas estructuradas
        estadisticas = EstadisticasResponse(**resultado_simulacion["estadisticas"])
        
        # Combinar resultados
        return SimulateResponse(
            success=True,
            message=f"PDF procesado exitosamente: {len(resultado_extraccion.bases)} bases extra√≠das y simulaci√≥n completada",
            bases_procesadas=resultado_simulacion["bases_procesadas"],
            estadisticas=estadisticas,
            calculo_elegido=resultado_simulacion["calculo_elegido"],
            comparativa_calculos=resultado_simulacion["comparativa_calculos"],
            parametros_computo=resultado_simulacion["parametros_computo"],
            fecha_jubilacion=resultado_simulacion["fecha_jubilacion"],
            regimen_acceso=resultado_simulacion["regimen_acceso"],
            sexo=sexo,
            # A√±adir metadatos de extracci√≥n como campo extra
            metadata_extraccion=metadata_extraccion
        )
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except BasesParserError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")


@router.post(
    "/simulate", 
    response_model=SimulateResponse,
    summary="üßÆ Calcular base reguladora completa",
    description="""
    Calcula la base reguladora de pensi√≥n con simulaci√≥n completa de per√≠odos.
    
    ### üéØ Que hace este endpoint:
    * **Simula per√≠odos futuros** hasta la fecha de jubilaci√≥n
    * **Aplica revalorizaci√≥n** seg√∫n normativa vigente 2025
    * **Maneja lagunas** de cotizaci√≥n autom√°ticamente
    * **Calcula base reguladora** final para la pensi√≥n
    
    ### üìä Proceso de c√°lculo:
    1. **Validaci√≥n** de datos de entrada
    2. **Simulaci√≥n** de per√≠odos futuros si es necesario
    3. **Revalorizaci√≥n** de bases seg√∫n fecha
    4. **C√°lculo** de base reguladora final
    
    ### ‚öôÔ∏è Par√°metros considerados:
    * N√∫mero de bases a incluir seg√∫n a√±o de jubilaci√≥n
    * √çndices de revalorizaci√≥n aplicables
    * Divisor para calcular base reguladora
    * R√©gimen de cotizaci√≥n (General/Aut√≥nomo)
    
    ### üìà Resultado detallado:
    Devuelve base reguladora, estad√≠sticas completas y todas las bases procesadas.
    """,
    responses={
        200: {
            "description": "Simulaci√≥n completada exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "success": True,
                        "message": "Simulaci√≥n completada exitosamente",
                        "calculo_elegido": "reforma_rd2_2023",
                        "estadisticas": {
                            "total_bases": 300,
                            "bases_revalorizadas": 276,
                            "bases_no_revalorizadas": 24,
                            "suma_periodo_revalorizado": 650000.00,
                            "suma_periodo_no_revalorizado": 60000.00,
                            "suma_total": 710000.00,
                            "base_reguladora": 2028.57
                        },
                        "comparativa_calculos": {
                            "calculo_reforma_rd2_2023": {
                                "parametros": {"bases_incluidas": 300, "divisor": 350},
                                "estadisticas": {"base_reguladora": 2028.57}
                            },
                            "calculo_prereforma": {
                                "parametros": {"bases_incluidas": 300, "divisor": 350},
                                "estadisticas": {"base_reguladora": 2020.45}
                            }
                        },
                        "fecha_jubilacion": "06/2025",
                        "regimen_acceso": "GENERAL"
                    }
                }
            }
        },
        400: {"description": "Error en los datos de entrada"},
        500: {"description": "Error interno del servidor"}
    }
)
async def simulate_bases(request: SimulateRequest):
    """
    Simula per√≠odos y calcula la base reguladora de pensi√≥n.
    
    Args:
        request: Datos para la simulaci√≥n (bases, fecha jubilaci√≥n, r√©gimen)
        
    Returns:
        SimulateResponse: Resultado de la simulaci√≥n con base reguladora
        
    Raises:
        HTTPException: Si hay errores en el procesamiento
    """
    try:
        # Validar que hay bases para procesar
        if not request.bases_extraidas:
            raise HTTPException(
                status_code=400,
                detail="No se proporcionaron bases para procesar"
            )
        
        # Preparar datos para el simulador
        bases_data = {
            "bases": request.bases_extraidas
        }
        
        # Crear y ejecutar simulador
        simulador = SimuladorPeriodos(
            bases_extraidas=bases_data,
            fecha_jubilacion=request.fecha_jubilacion,
            regimen_acceso=request.regimen_acceso,
            sexo=request.sexo
        )
        
        # Procesar bases completas
        resultado = simulador.procesar_bases_completo()
        
        # Crear response con estad√≠sticas estructuradas
        estadisticas = EstadisticasResponse(**resultado["estadisticas"])
        
        return SimulateResponse(
            success=True,
            message="Simulaci√≥n completada exitosamente",
            bases_procesadas=resultado["bases_procesadas"],
            estadisticas=estadisticas,
            calculo_elegido=resultado["calculo_elegido"],
            comparativa_calculos=resultado["comparativa_calculos"],
            parametros_computo=resultado["parametros_computo"],
            fecha_jubilacion=resultado["fecha_jubilacion"],
            regimen_acceso=resultado["regimen_acceso"],
            sexo=request.sexo
        )
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except BasesParserError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")



@router.get("/simulate/health")
async def simulate_health():
    """Endpoint de salud para el servicio de simulaci√≥n."""
    return {"status": "healthy", "service": "simulation"}


@router.get(
    "/simulate/config",
    summary="‚öôÔ∏è Configuraci√≥n de simulaci√≥n",
    description="""
    Obtiene toda la configuraci√≥n disponible para realizar simulaciones.
    
    ### üìã Configuraci√≥n incluida:
    * **√çndices de revalorizaci√≥n** por a√±o
    * **Bases m√≠nimas** de cotizaci√≥n
    * **Par√°metros de c√≥mputo** anual
    * **Reg√≠menes** soportados
    
    ### üîß Utilidad:
    * Validar par√°metros antes de simular
    * Mostrar opciones disponibles en interfaces
    * Verificar actualizaciones de normativa
    
    ### üìä Datos actualizados:
    La configuraci√≥n se carga desde archivos YAML actualizados con la normativa vigente.
    """,
    responses={
        200: {
            "description": "Configuraci√≥n obtenida correctamente",
            "content": {
                "application/json": {
                    "example": {
                        "indices_revalorizacion": {
                            "2023": 1.035,
                            "2024": 1.027,
                            "2025": 1.025
                        },
                        "bases_minimas": {
                            "GENERAL": {
                                "2024": 1080.00,
                                "2025": 1134.00
                            }
                        },
                        "parametros_computo": {
                            "2025": {
                                "numero_bases": 300,
                                "divisor": 350
                            }
                        },
                        "regimenes_soportados": ["GENERAL", "AUTONOMO"]
                    }
                }
            }
        },
        503: {"description": "Error al cargar configuraci√≥n"}
    }
)
async def get_simulation_config():
    """
    Obtiene la configuraci√≥n disponible para simulaciones.
    
    Returns:
        dict: Configuraci√≥n de par√°metros de simulaci√≥n
    """
    try:
        from core.config.config_manager import config
        
        # Cargar configuraciones
        parametros = config.cargar_parametros_computo()
        indices = config.cargar_indices_revalorizacion()
        topes_cotizacion = config.cargar_topes_cotizacion()
        
        # Extraer bases m√≠nimas de topes de cotizaci√≥n
        bases_minimas = {a√±o: datos["base_minima_mensual"] for a√±o, datos in topes_cotizacion.items()}
        
        # Obtener a√±os disponibles
        a√±os_parametros = sorted(parametros.keys())
        a√±os_indices = sorted([int(fecha.split('/')[1]) for fecha in indices.keys()])
        a√±os_bases_minimas = sorted(bases_minimas.keys())
        
        return {
            "parametros_computo": {
                "a√±os_disponibles": a√±os_parametros,
                "a√±o_minimo": min(a√±os_parametros),
                "a√±o_maximo": max(a√±os_parametros)
            },
            "indices_revalorizacion": {
                "total_indices": len(indices),
                "a√±os_disponibles": list(set(a√±os_indices)),
                "periodo_cobertura": {
                    "desde": min(a√±os_indices) if a√±os_indices else None,
                    "hasta": max(a√±os_indices) if a√±os_indices else None
                }
            },
            "bases_minimas": {
                "a√±os_disponibles": a√±os_bases_minimas,
                "a√±o_minimo": min(a√±os_bases_minimas) if a√±os_bases_minimas else None,
                "a√±o_maximo": max(a√±os_bases_minimas) if a√±os_bases_minimas else None
            },
            "regimenes_soportados": ["GENERAL", "AUTONOMO"]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n: {str(e)}")
