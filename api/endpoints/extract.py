"""
Endpoint para extraer bases de cotizaci√≥n de archivos PDF.
"""

import tempfile
from pathlib import Path
from typing import List

from fastapi import APIRouter, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse

from services.extractor import ExtractorBasesCotizacion
from models.api_models import ExtractResponse, ErrorResponse
from core.config.errors import BasesParserError


router = APIRouter()


@router.post(
    "/extract", 
    response_model=ExtractResponse,
    summary="üìÑ Extraer bases de cotizaci√≥n",
    description="""
    Extrae autom√°ticamente las bases de cotizaci√≥n de un archivo PDF.
    
    ### üìã Que hace este endpoint:
    * Procesa archivos PDF de la Seguridad Social
    * Identifica autom√°ticamente empresas y reg√≠menes
    * Extrae todas las bases de cotizaci√≥n por mes/a√±o
    * Valida y estructura los datos extra√≠dos
    
    ### üìÑ Formato soportado:
    * **PDFs est√°ndar** de bases de cotizaci√≥n de la Seguridad Social
    * Tama√±o m√°ximo: **10MB**
    
    ### üìä Datos extra√≠dos:
    * Mes/a√±o de cotizaci√≥n
    * Base de cotizaci√≥n mensual
    * Empresa empleadora
    * R√©gimen de cotizaci√≥n
    
    ### ‚úÖ Respuesta exitosa:
    Devuelve todas las bases encontradas con metadatos del archivo procesado.
    """,
    responses={
        200: {
            "description": "Bases extra√≠das correctamente",
            "content": {
                "application/json": {
                    "example": {
                        "success": True,
                        "message": "Se extrajeron 24 bases de cotizaci√≥n exitosamente",
                        "total_bases": 24,
                        "bases": [
                            {
                                "mes_anyo": "01/2023",
                                "base": 2500.50,
                                "empresa": "EMPRESA EJEMPLO SL",
                                "regimen": "GENERAL"
                            }
                        ],
                        "metadata": {
                            "filename": "bases_cotizacion.pdf",
                            "file_size": 1024000,
                            "total_empresas": 2,
                            "periodo_bases": {
                                "desde": "01/2022",
                                "hasta": "12/2023"
                            }
                        }
                    }
                }
            }
        },
        400: {"description": "Error en el archivo o formato no v√°lido"},
        500: {"description": "Error interno del servidor"}
    }
)
async def extract_bases(file: UploadFile = File(..., description="üìÅ Archivo PDF con bases de cotizaci√≥n")):
    """
    Extrae bases de cotizaci√≥n de un archivo PDF.
    
    Args:
        file: Archivo PDF con las bases de cotizaci√≥n
        
    Returns:
        ExtractResponse: Bases extra√≠das y metadatos
        
    Raises:
        HTTPException: Si hay errores en el procesamiento
    """
    # Validar tipo de archivo
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(
            status_code=400,
            detail="El archivo debe ser un PDF"
        )
    
    # Validar tama√±o del archivo (m√°ximo 10MB)
    max_size = 10 * 1024 * 1024  # 10MB
    if file.size and file.size > max_size:
        raise HTTPException(
            status_code=400,
            detail="El archivo es demasiado grande. M√°ximo 10MB"
        )
    
    try:
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_file:
            # Leer y guardar el contenido del archivo
            content = await file.read()
            temp_file.write(content)
            temp_file_path = Path(temp_file.name)
        
        try:
            # Extraer bases usando el servicio
            extractor = ExtractorBasesCotizacion(temp_file_path)
            resultado = extractor.run()
            
            # Preparar metadatos
            metadata = {
                "filename": file.filename,
                "file_size": len(content),
                "total_empresas": len(set(base.empresa for base in resultado.bases)),
                "periodo_bases": {
                    "desde": min(base.mes_anyo for base in resultado.bases) if resultado.bases else None,
                    "hasta": max(base.mes_anyo for base in resultado.bases) if resultado.bases else None
                }
            }
            
            return ExtractResponse(
                success=True,
                message=f"Se extrajeron {len(resultado.bases)} bases de cotizaci√≥n exitosamente",
                total_bases=len(resultado.bases),
                bases=resultado.bases,
                metadata=metadata
            )
            
        finally:
            # Limpiar archivo temporal
            if temp_file_path.exists():
                temp_file_path.unlink()
                
    except BasesParserError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")


@router.get("/extract/health")
async def extract_health():
    """Endpoint de salud para el servicio de extracci√≥n."""
    return {"status": "healthy", "service": "extraction"}
